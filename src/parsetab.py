
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLORleftLANDleftORXORANDleftEQNEGTLTGELEleftPLUSMINUSleftTIMESDIVIDEMODULOrightUMINUSleftQUESTIONMARKCOLONleftTIMESEQUALDIVEQUALMODEQUALPLUSEQUALMINUSEQUALleftCOMMArightEQUALSLNOTNOTINCREMENTDECREMENTALSE AND AS AUTO BREAK CASE CLASS CLOSE COLON COMMA CONST CONTINUE DECREMENT DEF DEFAULT DEL DIVEQUAL DIVIDE ELSE EQ EQUALS EXCEPT FOR FROM GE GLOBAL GT ID IF IMPORT IN INCREMENT INPUT INT IS LAMBDA LAND LBRACE LBRACKET LE LEN LENGTH LNOT LOR LPAREN LSHIFT LT MINUS MINUSEQUAL MODEQUAL MODULO NE NONLOCAL NOT NULL NUMBER ONE OPEN OR PASS PERIOD PLUS PLUSEQUAL QUESTIONMARK RAISE RANGE RBRACE RBRACKET READ RETURN RPAREN RSHIFT RUE SEMI SIZEOF STATIC STR STRING STRUCT SWITCH TIMES TIMESEQUAL TO TRY TYPE VAR VECTOR VOID WHILE WITH WRITE XORprog : empty\n                | func progfunc : DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE\n                | DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMIfunc : DEF TYPE ID LPAREN error RPAREN LBRACE body RBRACEfunc : DEF error ID LPAREN flist RPAREN LBRACE body RBRACEbody : empty \n                | stmt bodystmt : expr SEMI                                \n                | defvar SEMI\n                | return_instr SEMI\n                | single_if             \n                | if_with_else\n                | while_loop             \n                | for_loop \n                | block                  \n                | funcstmt : error SEMI\n                | errorsingle_if : IF LPAREN expr RPAREN stmtif_with_else : IF LPAREN expr RPAREN stmt ELSE stmtwhile_loop : WHILE LPAREN expr RPAREN stmtfor_loop : FOR LPAREN ID EQUALS expr TO expr RPAREN stmtblock : LBRACE body RBRACEreturn_instr : RETURN exprdefvar : VAR TYPE ID\n                  | VAR TYPE ID EQUALS exprflist : empty\n                | TYPE ID\n                | TYPE ID COMMA flistclist : empty\n                 | expr\n                 | expr COMMA clistexpr : operation_on_list               \n                | expr_list                   \n                | ternary_expr                \n                | LNOT expr                        \n                | PLUS expr                        \n                | MINUS expr %prec UMINUS\n                | binary_expr                     \n                | ID                               \n                | assignment                   \n                | function_call \n                | NUMBER                           \n                | STRINGexpr_list : LBRACKET clist RBRACKEToperation_on_list : expr LBRACKET expr RBRACKET\n                             | ID LBRACKET expr RBRACKETassignment : ID EQUALS expr\n                      | ID LBRACKET expr RBRACKET EQUALS exprternary_expr : expr QUESTIONMARK expr COLON expr  function_call : ID LPAREN clist RPARENbinary_expr : expr PLUS expr                   \n                       | expr MINUS expr                  \n                       | expr TIMES expr                  \n                       | expr DIVIDE expr                 \n                       | expr MODULO expr                 \n                       | expr GT expr                     \n                       | expr LT expr                     \n                       | expr EQ expr                     \n                       | expr LE expr                     \n                       | expr GE expr                     \n                       | expr NE expr                     \n                       | expr LOR expr                    \n                       | expr LAND exprempty :'
    
_lr_action_items = {'$end':([0,1,2,3,5,66,98,99,100,],[-66,0,-1,-66,-2,-3,-4,-5,-6,]),'DEF':([0,3,22,24,25,28,31,35,36,37,38,39,40,41,66,68,84,85,86,98,99,100,104,131,132,138,139,142,144,146,147,],[4,4,4,4,4,4,4,-12,-13,-14,-15,-16,-17,-19,-3,-9,-10,-11,-18,-4,-5,-6,-24,4,4,-20,-22,4,-21,4,-23,]),'TYPE':([4,10,11,21,53,],[6,12,12,12,90,]),'error':([4,10,22,24,25,28,31,35,36,37,38,39,40,41,66,68,84,85,86,98,99,100,104,131,132,138,139,142,144,146,147,],[7,14,41,41,41,41,41,-12,-13,-14,-15,-16,-17,-19,-3,-9,-10,-11,-18,-4,-5,-6,-24,41,41,-20,-22,41,-21,41,-23,]),'ID':([6,7,12,22,23,24,25,28,31,35,36,37,38,39,40,41,45,46,47,54,58,62,63,64,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,90,92,93,94,98,99,100,104,125,129,130,131,132,133,135,138,139,142,143,144,146,147,],[8,9,17,27,27,27,27,27,27,-12,-13,-14,-15,-16,-17,-19,27,27,27,27,27,27,27,27,-3,-9,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-10,-11,-18,120,27,27,123,-4,-5,-6,-24,27,27,27,27,27,27,27,-20,-22,27,27,-21,27,-23,]),'LPAREN':([8,9,27,55,56,57,],[10,11,64,92,93,94,]),'RPAREN':([10,11,13,14,15,16,17,21,26,27,42,43,44,48,49,50,51,52,64,87,88,89,96,97,102,103,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,124,125,126,127,128,134,136,141,145,],[-66,-66,18,19,-28,20,-29,-66,-30,-41,-34,-35,-36,-40,-42,-43,-44,-45,-66,-37,-38,-39,-31,-32,-49,127,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,131,132,-46,-66,-48,-52,-47,-33,-51,-50,146,]),'COMMA':([17,27,42,43,44,48,49,50,51,52,87,88,89,97,102,107,108,109,110,111,112,113,114,115,116,117,118,119,124,126,127,128,136,141,],[21,-41,-34,-35,-36,-40,-42,-43,-44,-45,-37,-38,-39,125,-49,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-46,-48,-52,-47,-51,-50,]),'LBRACE':([18,19,20,22,24,25,28,31,35,36,37,38,39,40,41,66,68,84,85,86,98,99,100,104,131,132,138,139,142,144,146,147,],[22,24,25,28,28,28,28,28,-12,-13,-14,-15,-16,-17,-19,-3,-9,-10,-11,-18,-4,-5,-6,-24,28,28,-20,-22,28,-21,28,-23,]),'RETURN':([18,22,24,25,28,31,35,36,37,38,39,40,41,66,68,84,85,86,98,99,100,104,131,132,138,139,142,144,146,147,],[23,54,54,54,54,54,-12,-13,-14,-15,-16,-17,-19,-3,-9,-10,-11,-18,-4,-5,-6,-24,54,54,-20,-22,54,-21,54,-23,]),'RBRACE':([22,24,25,28,29,30,31,35,36,37,38,39,40,41,60,61,65,66,67,68,84,85,86,98,99,100,104,138,139,144,147,],[-66,-66,-66,-66,66,-7,-66,-12,-13,-14,-15,-16,-17,-19,99,100,104,-3,-8,-9,-10,-11,-18,-4,-5,-6,-24,-20,-22,-21,-23,]),'LNOT':([22,23,24,25,28,31,35,36,37,38,39,40,41,45,46,47,54,58,62,63,64,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,93,98,99,100,104,125,129,130,131,132,133,135,138,139,142,143,144,146,147,],[45,45,45,45,45,45,-12,-13,-14,-15,-16,-17,-19,45,45,45,45,45,45,45,45,-3,-9,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-10,-11,-18,45,45,-4,-5,-6,-24,45,45,45,45,45,45,45,-20,-22,45,45,-21,45,-23,]),'PLUS':([22,23,24,25,27,28,31,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,58,59,62,63,64,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,97,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,124,125,126,127,128,129,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,],[46,46,46,46,-41,46,46,71,-12,-13,-14,-15,-16,-17,-19,-34,-35,-36,46,46,46,-40,-42,-43,-44,-45,46,46,71,46,46,46,-3,-9,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-10,-11,-18,-37,-38,-39,71,46,46,71,-4,-5,-6,71,-49,-24,71,71,-53,-54,-55,-56,-57,71,71,71,71,71,71,71,71,71,71,-46,46,-48,-52,-47,46,46,46,46,46,46,-51,71,-20,-22,71,-50,46,46,-21,71,46,-23,]),'MINUS':([22,23,24,25,27,28,31,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,58,59,62,63,64,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,97,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,124,125,126,127,128,129,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,],[47,47,47,47,-41,47,47,72,-12,-13,-14,-15,-16,-17,-19,-34,-35,-36,47,47,47,-40,-42,-43,-44,-45,47,47,72,47,47,47,-3,-9,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-10,-11,-18,-37,-38,-39,72,47,47,72,-4,-5,-6,72,-49,-24,72,72,-53,-54,-55,-56,-57,72,72,72,72,72,72,72,72,72,72,-46,47,-48,-52,-47,47,47,47,47,47,47,-51,72,-20,-22,72,-50,47,47,-21,72,47,-23,]),'NUMBER':([22,23,24,25,28,31,35,36,37,38,39,40,41,45,46,47,54,58,62,63,64,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,93,98,99,100,104,125,129,130,131,132,133,135,138,139,142,143,144,146,147,],[51,51,51,51,51,51,-12,-13,-14,-15,-16,-17,-19,51,51,51,51,51,51,51,51,-3,-9,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-10,-11,-18,51,51,-4,-5,-6,-24,51,51,51,51,51,51,51,-20,-22,51,51,-21,51,-23,]),'STRING':([22,23,24,25,28,31,35,36,37,38,39,40,41,45,46,47,54,58,62,63,64,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,93,98,99,100,104,125,129,130,131,132,133,135,138,139,142,143,144,146,147,],[52,52,52,52,52,52,-12,-13,-14,-15,-16,-17,-19,52,52,52,52,52,52,52,52,-3,-9,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-10,-11,-18,52,52,-4,-5,-6,-24,52,52,52,52,52,52,52,-20,-22,52,52,-21,52,-23,]),'VAR':([22,24,25,28,31,35,36,37,38,39,40,41,66,68,84,85,86,98,99,100,104,131,132,138,139,142,144,146,147,],[53,53,53,53,53,-12,-13,-14,-15,-16,-17,-19,-3,-9,-10,-11,-18,-4,-5,-6,-24,53,53,-20,-22,53,-21,53,-23,]),'IF':([22,24,25,28,31,35,36,37,38,39,40,41,66,68,84,85,86,98,99,100,104,131,132,138,139,142,144,146,147,],[55,55,55,55,55,-12,-13,-14,-15,-16,-17,-19,-3,-9,-10,-11,-18,-4,-5,-6,-24,55,55,-20,-22,55,-21,55,-23,]),'WHILE':([22,24,25,28,31,35,36,37,38,39,40,41,66,68,84,85,86,98,99,100,104,131,132,138,139,142,144,146,147,],[56,56,56,56,56,-12,-13,-14,-15,-16,-17,-19,-3,-9,-10,-11,-18,-4,-5,-6,-24,56,56,-20,-22,56,-21,56,-23,]),'FOR':([22,24,25,28,31,35,36,37,38,39,40,41,66,68,84,85,86,98,99,100,104,131,132,138,139,142,144,146,147,],[57,57,57,57,57,-12,-13,-14,-15,-16,-17,-19,-3,-9,-10,-11,-18,-4,-5,-6,-24,57,57,-20,-22,57,-21,57,-23,]),'LBRACKET':([22,23,24,25,27,28,31,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,58,59,62,63,64,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,97,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,124,125,126,127,128,129,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,],[58,58,58,58,62,58,58,69,-12,-13,-14,-15,-16,-17,-19,-34,-35,-36,58,58,58,-40,-42,-43,-44,-45,58,58,69,58,58,58,-3,-9,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-10,-11,-18,-37,-38,-39,69,58,58,69,-4,-5,-6,69,-49,-24,69,69,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,69,69,-46,58,-48,-52,-47,58,58,58,58,58,58,-51,69,-20,-22,69,-50,58,58,-21,69,58,-23,]),'SEMI':([27,32,33,34,41,42,43,44,48,49,50,51,52,59,87,88,89,91,102,107,108,109,110,111,112,113,114,115,116,117,118,119,120,124,126,127,128,136,137,141,],[-41,68,84,85,86,-34,-35,-36,-40,-42,-43,-44,-45,98,-37,-38,-39,-25,-49,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-26,-46,-48,-52,-47,-51,-27,-50,]),'QUESTIONMARK':([27,32,42,43,44,48,49,50,51,52,59,87,88,89,91,97,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,124,126,127,128,136,137,140,141,145,],[-41,70,-34,-35,-36,-40,-42,-43,-44,-45,70,-37,70,70,70,70,70,-49,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-46,-48,-52,-47,-51,70,70,-50,70,]),'TIMES':([27,32,42,43,44,48,49,50,51,52,59,87,88,89,91,97,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,124,126,127,128,136,137,140,141,145,],[-41,73,-34,-35,-36,-40,-42,-43,-44,-45,73,-37,73,-39,73,73,73,-49,73,73,73,73,-55,-56,-57,73,73,73,73,73,73,73,73,73,73,-46,-48,-52,-47,-51,73,73,-50,73,]),'DIVIDE':([27,32,42,43,44,48,49,50,51,52,59,87,88,89,91,97,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,124,126,127,128,136,137,140,141,145,],[-41,74,-34,-35,-36,-40,-42,-43,-44,-45,74,-37,74,-39,74,74,74,-49,74,74,74,74,-55,-56,-57,74,74,74,74,74,74,74,74,74,74,-46,-48,-52,-47,-51,74,74,-50,74,]),'MODULO':([27,32,42,43,44,48,49,50,51,52,59,87,88,89,91,97,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,124,126,127,128,136,137,140,141,145,],[-41,75,-34,-35,-36,-40,-42,-43,-44,-45,75,-37,75,-39,75,75,75,-49,75,75,75,75,-55,-56,-57,75,75,75,75,75,75,75,75,75,75,-46,-48,-52,-47,-51,75,75,-50,75,]),'GT':([27,32,42,43,44,48,49,50,51,52,59,87,88,89,91,97,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,124,126,127,128,136,137,140,141,145,],[-41,76,-34,-35,-36,-40,-42,-43,-44,-45,76,-37,-38,-39,76,76,76,-49,76,76,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,76,76,76,76,-46,-48,-52,-47,-51,76,76,-50,76,]),'LT':([27,32,42,43,44,48,49,50,51,52,59,87,88,89,91,97,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,124,126,127,128,136,137,140,141,145,],[-41,77,-34,-35,-36,-40,-42,-43,-44,-45,77,-37,-38,-39,77,77,77,-49,77,77,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,77,77,77,77,-46,-48,-52,-47,-51,77,77,-50,77,]),'EQ':([27,32,42,43,44,48,49,50,51,52,59,87,88,89,91,97,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,124,126,127,128,136,137,140,141,145,],[-41,78,-34,-35,-36,-40,-42,-43,-44,-45,78,-37,-38,-39,78,78,78,-49,78,78,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,78,78,78,78,-46,-48,-52,-47,-51,78,78,-50,78,]),'LE':([27,32,42,43,44,48,49,50,51,52,59,87,88,89,91,97,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,124,126,127,128,136,137,140,141,145,],[-41,79,-34,-35,-36,-40,-42,-43,-44,-45,79,-37,-38,-39,79,79,79,-49,79,79,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,79,79,79,79,-46,-48,-52,-47,-51,79,79,-50,79,]),'GE':([27,32,42,43,44,48,49,50,51,52,59,87,88,89,91,97,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,124,126,127,128,136,137,140,141,145,],[-41,80,-34,-35,-36,-40,-42,-43,-44,-45,80,-37,-38,-39,80,80,80,-49,80,80,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,80,80,80,80,-46,-48,-52,-47,-51,80,80,-50,80,]),'NE':([27,32,42,43,44,48,49,50,51,52,59,87,88,89,91,97,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,124,126,127,128,136,137,140,141,145,],[-41,81,-34,-35,-36,-40,-42,-43,-44,-45,81,-37,-38,-39,81,81,81,-49,81,81,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,81,81,81,81,-46,-48,-52,-47,-51,81,81,-50,81,]),'LOR':([27,32,42,43,44,48,49,50,51,52,59,87,88,89,91,97,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,124,126,127,128,136,137,140,141,145,],[-41,82,-34,-35,-36,-40,-42,-43,-44,-45,82,-37,-38,-39,82,82,82,-49,82,82,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,82,82,-46,-48,-52,-47,-51,82,82,-50,82,]),'LAND':([27,32,42,43,44,48,49,50,51,52,59,87,88,89,91,97,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,124,126,127,128,136,137,140,141,145,],[-41,83,-34,-35,-36,-40,-42,-43,-44,-45,83,-37,-38,-39,83,83,83,-49,83,83,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,83,-65,83,83,-46,-48,-52,-47,-51,83,83,-50,83,]),'RBRACKET':([27,42,43,44,48,49,50,51,52,58,87,88,89,95,96,97,101,102,105,107,108,109,110,111,112,113,114,115,116,117,118,119,124,125,126,127,128,134,136,141,],[-41,-34,-35,-36,-40,-42,-43,-44,-45,-66,-37,-38,-39,124,-31,-32,126,-49,128,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-46,-66,-48,-52,-47,-33,-51,-50,]),'COLON':([27,42,43,44,48,49,50,51,52,87,88,89,102,106,107,108,109,110,111,112,113,114,115,116,117,118,119,124,126,127,128,136,141,],[-41,-34,-35,-36,-40,-42,-43,-44,-45,-37,-38,-39,-49,129,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-46,-48,-52,-47,-51,-50,]),'TO':([27,42,43,44,48,49,50,51,52,87,88,89,102,107,108,109,110,111,112,113,114,115,116,117,118,119,124,126,127,128,136,140,141,],[-41,-34,-35,-36,-40,-42,-43,-44,-45,-37,-38,-39,-49,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-46,-48,-52,-47,-51,143,-50,]),'EQUALS':([27,120,123,126,],[63,130,133,135,]),'ELSE':([35,36,37,38,39,40,41,66,68,84,85,86,98,99,100,104,138,139,144,147,],[-12,-13,-14,-15,-16,-17,-19,-3,-9,-10,-11,-18,-4,-5,-6,-24,142,-22,-21,-23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,3,],[1,5,]),'empty':([0,3,10,11,21,22,24,25,28,31,58,64,125,],[2,2,15,15,15,30,30,30,30,30,96,96,96,]),'func':([0,3,22,24,25,28,31,131,132,142,146,],[3,3,40,40,40,40,40,40,40,40,40,]),'flist':([10,11,21,],[13,16,26,]),'body':([22,24,25,28,31,],[29,60,61,65,67,]),'stmt':([22,24,25,28,31,131,132,142,146,],[31,31,31,31,31,138,139,144,147,]),'expr':([22,23,24,25,28,31,45,46,47,54,58,62,63,64,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,92,93,125,129,130,131,132,133,135,142,143,146,],[32,59,32,32,32,32,87,88,89,91,97,101,102,97,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,97,136,137,32,32,140,141,32,145,32,]),'defvar':([22,24,25,28,31,131,132,142,146,],[33,33,33,33,33,33,33,33,33,]),'return_instr':([22,24,25,28,31,131,132,142,146,],[34,34,34,34,34,34,34,34,34,]),'single_if':([22,24,25,28,31,131,132,142,146,],[35,35,35,35,35,35,35,35,35,]),'if_with_else':([22,24,25,28,31,131,132,142,146,],[36,36,36,36,36,36,36,36,36,]),'while_loop':([22,24,25,28,31,131,132,142,146,],[37,37,37,37,37,37,37,37,37,]),'for_loop':([22,24,25,28,31,131,132,142,146,],[38,38,38,38,38,38,38,38,38,]),'block':([22,24,25,28,31,131,132,142,146,],[39,39,39,39,39,39,39,39,39,]),'operation_on_list':([22,23,24,25,28,31,45,46,47,54,58,62,63,64,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,92,93,125,129,130,131,132,133,135,142,143,146,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'expr_list':([22,23,24,25,28,31,45,46,47,54,58,62,63,64,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,92,93,125,129,130,131,132,133,135,142,143,146,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'ternary_expr':([22,23,24,25,28,31,45,46,47,54,58,62,63,64,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,92,93,125,129,130,131,132,133,135,142,143,146,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'binary_expr':([22,23,24,25,28,31,45,46,47,54,58,62,63,64,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,92,93,125,129,130,131,132,133,135,142,143,146,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'assignment':([22,23,24,25,28,31,45,46,47,54,58,62,63,64,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,92,93,125,129,130,131,132,133,135,142,143,146,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'function_call':([22,23,24,25,28,31,45,46,47,54,58,62,63,64,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,92,93,125,129,130,131,132,133,135,142,143,146,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'clist':([58,64,125,],[95,103,134,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> empty','prog',1,'p_prog','TeslangParser.py',45),
  ('prog -> func prog','prog',2,'p_prog','TeslangParser.py',46),
  ('func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE','func',9,'p_func','TeslangParser.py',52),
  ('func -> DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI','func',9,'p_func','TeslangParser.py',53),
  ('func -> DEF TYPE ID LPAREN error RPAREN LBRACE body RBRACE','func',9,'p_func_parameter_error','TeslangParser.py',60),
  ('func -> DEF error ID LPAREN flist RPAREN LBRACE body RBRACE','func',9,'p_func_missing_return_type_error','TeslangParser.py',66),
  ('body -> empty','body',1,'p_body','TeslangParser.py',73),
  ('body -> stmt body','body',2,'p_body','TeslangParser.py',74),
  ('stmt -> expr SEMI','stmt',2,'p_stmt','TeslangParser.py',80),
  ('stmt -> defvar SEMI','stmt',2,'p_stmt','TeslangParser.py',81),
  ('stmt -> return_instr SEMI','stmt',2,'p_stmt','TeslangParser.py',82),
  ('stmt -> single_if','stmt',1,'p_stmt','TeslangParser.py',83),
  ('stmt -> if_with_else','stmt',1,'p_stmt','TeslangParser.py',84),
  ('stmt -> while_loop','stmt',1,'p_stmt','TeslangParser.py',85),
  ('stmt -> for_loop','stmt',1,'p_stmt','TeslangParser.py',86),
  ('stmt -> block','stmt',1,'p_stmt','TeslangParser.py',87),
  ('stmt -> func','stmt',1,'p_stmt','TeslangParser.py',88),
  ('stmt -> error SEMI','stmt',2,'p_stmt_error','TeslangParser.py',92),
  ('stmt -> error','stmt',1,'p_stmt_error','TeslangParser.py',93),
  ('single_if -> IF LPAREN expr RPAREN stmt','single_if',5,'p_single_if','TeslangParser.py',100),
  ('if_with_else -> IF LPAREN expr RPAREN stmt ELSE stmt','if_with_else',7,'p_if_with_else','TeslangParser.py',105),
  ('while_loop -> WHILE LPAREN expr RPAREN stmt','while_loop',5,'p_while_loop','TeslangParser.py',110),
  ('for_loop -> FOR LPAREN ID EQUALS expr TO expr RPAREN stmt','for_loop',9,'p_for_loop','TeslangParser.py',114),
  ('block -> LBRACE body RBRACE','block',3,'p_block','TeslangParser.py',119),
  ('return_instr -> RETURN expr','return_instr',2,'p_return_instr','TeslangParser.py',124),
  ('defvar -> VAR TYPE ID','defvar',3,'p_defvar','TeslangParser.py',129),
  ('defvar -> VAR TYPE ID EQUALS expr','defvar',5,'p_defvar','TeslangParser.py',130),
  ('flist -> empty','flist',1,'p_flist','TeslangParser.py',138),
  ('flist -> TYPE ID','flist',2,'p_flist','TeslangParser.py',139),
  ('flist -> TYPE ID COMMA flist','flist',4,'p_flist','TeslangParser.py',140),
  ('clist -> empty','clist',1,'p_clist','TeslangParser.py',150),
  ('clist -> expr','clist',1,'p_clist','TeslangParser.py',151),
  ('clist -> expr COMMA clist','clist',3,'p_clist','TeslangParser.py',152),
  ('expr -> operation_on_list','expr',1,'p_expr','TeslangParser.py',165),
  ('expr -> expr_list','expr',1,'p_expr','TeslangParser.py',166),
  ('expr -> ternary_expr','expr',1,'p_expr','TeslangParser.py',167),
  ('expr -> LNOT expr','expr',2,'p_expr','TeslangParser.py',168),
  ('expr -> PLUS expr','expr',2,'p_expr','TeslangParser.py',169),
  ('expr -> MINUS expr','expr',2,'p_expr','TeslangParser.py',170),
  ('expr -> binary_expr','expr',1,'p_expr','TeslangParser.py',171),
  ('expr -> ID','expr',1,'p_expr','TeslangParser.py',172),
  ('expr -> assignment','expr',1,'p_expr','TeslangParser.py',173),
  ('expr -> function_call','expr',1,'p_expr','TeslangParser.py',174),
  ('expr -> NUMBER','expr',1,'p_expr','TeslangParser.py',175),
  ('expr -> STRING','expr',1,'p_expr','TeslangParser.py',176),
  ('expr_list -> LBRACKET clist RBRACKET','expr_list',3,'p_expr_list','TeslangParser.py',198),
  ('operation_on_list -> expr LBRACKET expr RBRACKET','operation_on_list',4,'p_operation_on_list','TeslangParser.py',202),
  ('operation_on_list -> ID LBRACKET expr RBRACKET','operation_on_list',4,'p_operation_on_list','TeslangParser.py',203),
  ('assignment -> ID EQUALS expr','assignment',3,'p_assignment','TeslangParser.py',207),
  ('assignment -> ID LBRACKET expr RBRACKET EQUALS expr','assignment',6,'p_assignment','TeslangParser.py',208),
  ('ternary_expr -> expr QUESTIONMARK expr COLON expr','ternary_expr',5,'p_ternary_expr','TeslangParser.py',215),
  ('function_call -> ID LPAREN clist RPAREN','function_call',4,'p_function_call','TeslangParser.py',219),
  ('binary_expr -> expr PLUS expr','binary_expr',3,'p_binary_expr','TeslangParser.py',229),
  ('binary_expr -> expr MINUS expr','binary_expr',3,'p_binary_expr','TeslangParser.py',230),
  ('binary_expr -> expr TIMES expr','binary_expr',3,'p_binary_expr','TeslangParser.py',231),
  ('binary_expr -> expr DIVIDE expr','binary_expr',3,'p_binary_expr','TeslangParser.py',232),
  ('binary_expr -> expr MODULO expr','binary_expr',3,'p_binary_expr','TeslangParser.py',233),
  ('binary_expr -> expr GT expr','binary_expr',3,'p_binary_expr','TeslangParser.py',234),
  ('binary_expr -> expr LT expr','binary_expr',3,'p_binary_expr','TeslangParser.py',235),
  ('binary_expr -> expr EQ expr','binary_expr',3,'p_binary_expr','TeslangParser.py',236),
  ('binary_expr -> expr LE expr','binary_expr',3,'p_binary_expr','TeslangParser.py',237),
  ('binary_expr -> expr GE expr','binary_expr',3,'p_binary_expr','TeslangParser.py',238),
  ('binary_expr -> expr NE expr','binary_expr',3,'p_binary_expr','TeslangParser.py',239),
  ('binary_expr -> expr LOR expr','binary_expr',3,'p_binary_expr','TeslangParser.py',240),
  ('binary_expr -> expr LAND expr','binary_expr',3,'p_binary_expr','TeslangParser.py',241),
  ('empty -> <empty>','empty',0,'p_empty','TeslangParser.py',247),
]
